@page "/"
@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using PUBG.Reddit.UGC.Models

<PageTitle>Home</PageTitle>
<MudDrawer @bind-Open="@_open" Elevation="0" Variant="@DrawerVariant.Persistent" ClipMode="DrawerClipMode.Always">
    <MudPaper Elevation="0" Class="pa-3">
        <MudTextField @bind-Value="searchDevices" Placeholder="Search devices..." Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" />
    </MudPaper> 
    <MudList Clickable="true" Dense="true" T="string">

<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>

<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>

<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.RoundEvent)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/RoundEvent.svg" />
                <span>RoundEvent</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>
  <MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.Timer)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/Timer.svg"/>
                <span>Timer</span>
</MudStack>
<MudStack Row=true draggable="true" @ondragstart="() => OnDragStart(DeviceType.SpecialZone)">
    <img height="48" width="48" class="d-block m-auto" src="images/devicesvg/SpecialZone.svg"/>
                <span>SpecialZone</span>
</MudStack>       
    </MudList>
</MudDrawer>
<div style="background-color: rgb(242,242,242, 70%); margin: 8px;width: 100%;height: 100%;"
    ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
    <CascadingValue Value="BlazorDiagram">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>
@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        BlazorDiagram.RegisterComponent<BotAnswerNode, BotAnswerWidget>();

        BlazorDiagram.Nodes.Add(new[] { NewNode(100, 100), NewNode(300, 300) });

    }

    string searchDevices = "";
    private bool _open = true;
    private BotAnswerNode NewNode(double x, double y, DeviceType? type = null)
    {
        if (type == null)
        {
            // If no type is provided, use a random device type
            // Get all device types from the enum
            var deviceTypes = Enum.GetValues(typeof(DeviceType)).Cast<DeviceType>().ToArray();

            // Generate a random index
            var random = new Random();
            var randomIndex = random.Next(0, deviceTypes.Length);

            // Get a random device type
            type = deviceTypes[randomIndex];
        }
        var node = new BotAnswerNode(new Point(x, y), type.ToString());
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Trigger 1"));
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Trigger 2"));
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Trigger 3"));
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Trigger 4"));
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Action 1"));
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Action 2"));
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Action 3"));
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Action 4"));
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Action 5"));


        return node;
    }
    private DeviceType? _draggedType;

    private void OnDragStart(DeviceType type)
    {
        // Can also use transferData, but this is probably "faster"
        _draggedType = type;
    }

    private void OnDrop(DragEventArgs e)
    {
        if (_draggedType == null) // Unkown item
            return;

        var position = BlazorDiagram.GetRelativeMousePoint(e.ClientX, e.ClientY);
        var node = NewNode(position.X, position.Y, _draggedType);

        BlazorDiagram.Nodes.Add(node);
        _draggedType = null;
    }

    protected readonly BlazorDiagram BlazorDiagram = new BlazorDiagram();

}