@page "/"

@using PUBGReddit.UGC.App.Models
@using MudBlazor

<MudDrawer Open="true" Anchor="Anchor.Left" Elevation="5" Style="width: 300px;"  Variant="@DrawerVariant.Persistent" ClipMode="DrawerClipMode.Always">
    <MudPaper Elevation="0" Class="pa-3">
        <MudTextField @bind-Value="searchQuery" Placeholder="Search maps..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-4" />

        <MudSelect T="string" @bind-Value="selectedTag" Placeholder="Filter by tag" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.FilterList" Class="mb-4">
            @foreach (var tag in Tags)
            {
                <MudSelectItem Value="@tag">@tag</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="ClearTagFilter">Clear Filter</MudButton>

          <div class="pagination-controls" Style="text-align: center; margin: 20px auto;">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" @onclick="PreviousPage" Disabled="@IsFirstPage" />
            <span style="margin: 0 10px;">Page @CurrentPage of @TotalPages</span>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" @onclick="NextPage" Disabled="@IsLastPage" />
        </div>
    </MudPaper>
</MudDrawer>

<MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="6" Style="margin: auto; max-width: 90%; ">
    @foreach (var map in PagedMaps)
    {
        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="2" class="displaypaper" >
                  <MudCardHeader>
                    <CardHeaderContent>
                        <div style="display: flex; align-items: center;">
                            @if (map.LastChangeDate >= DateOnly.FromDateTime(DateTime.Now.AddDays(-7)))
                            {
                                <MudIcon Icon="@Icons.Material.Filled.NewReleases" Color="Color.Primary" Style="margin-right: 8px;" />
                            }
                            <MudText Typo="Typo.subtitle1">@map.Name</MudText>
                        </div>
                        <MudText Typo="Typo.caption">By @map.Author</MudText>
                      <MudSpacer/>
                      
                    </CardHeaderContent>
                    <CardHeaderActions>

                      
            <MudIconButton  Icon="@Icons.Material.Filled.Download" Color="Color.Primary" Href="@map.MapUrl"></MudIconButton>

                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardMedia Image="@map.ImageUrl" Alt="@map.Name" />
                <MudCardContent> 
                    <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                        @foreach (var tag in map.Tags?.Split(',') ?? Array.Empty<string>())
                        {
                            <MudChip Size="Size.Small" Class="ma-0" T="string" Disabled="true" Variant="Variant.Outlined" Color="Color.Primary">@tag</MudChip> 
                        }
                    </div>
                    <MudText Class="my-4" Typo="Typo.body2">@map.Description</MudText>
                        <MudText Typo="Typo.caption">Last Changed: @map.LastChangeDate.ToString("MMMM dd, yyyy")</MudText>

                </MudCardContent> 
                
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    private string searchQuery = string.Empty;
    private string selectedTag = string.Empty;

    private List<string> Tags = new List<string>();

    private List<Map> Maps = TestMapProvider.GetTestMaps();

    private int CurrentPage = 1;
    private int PageSize = 6;

    private IEnumerable<Map> FilteredMaps => Maps
        .Where(m => (string.IsNullOrEmpty(searchQuery) || m.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true) &&
                    (string.IsNullOrEmpty(selectedTag) || (m.Tags?.Split(',').Contains(selectedTag) == true)))
        .OrderByDescending(m => m.LastChangeDate);

    private IEnumerable<Map> PagedMaps => FilteredMaps
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize);

    private int TotalPages => (int)Math.Ceiling((double)FilteredMaps.Count() / PageSize);

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
        }
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
        }
    }

    protected override void OnInitialized()
    {
        ExtractTagsFromMaps();
    }

    private void ExtractTagsFromMaps()
    {
        Tags = Maps
            .SelectMany(map => map.Tags?.Split(',') ?? Array.Empty<string>())
            .Distinct()
            .OrderBy(tag => tag)
            .ToList();
    }

    private void ClearTagFilter()
    {
        selectedTag = string.Empty;
    }
}
