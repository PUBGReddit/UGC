@page "/weather"
 
@using Blazor.Diagrams
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using MudBlazor
@using PUBG.Reddit.UGC.Models
@using MudBlazor.Utilities
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using PUBGReddit.UGC.App.Layout

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        BlazorDiagram.RegisterComponent<BotAnswerNode, BotAnswerWidget>();
 
        BlazorDiagram.Nodes.Add(new[] {   NewNode(100, 100), NewNode(300, 300) });
         
    }

    private BotAnswerNode NewNode(double x, double y)
    {
        // Get all device types from the enum
        var deviceTypes = Enum.GetValues(typeof(DeviceType)).Cast<DeviceType>().ToArray();

        // Generate a random index
        var random = new Random();
        var randomIndex = random.Next(0, deviceTypes.Length);

        // Get a random device type
        var DeviceType = deviceTypes[randomIndex].ToString();

        var node = new BotAnswerNode(new Point(x, y), DeviceType);
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Trigger 1"));
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Trigger 2"));
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Trigger 3"));
        node.AddPort(new DevicePort(node, PortAlignment.Left, "Trigger 4"));
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Action 1"));
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Action 2"));
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Action 3"));
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Action 4"));
        node.AddPort(new DevicePort(node, PortAlignment.Right, "Action 5")); 

         
        return node;
    }


    protected readonly BlazorDiagram BlazorDiagram = new BlazorDiagram();

}

<CascadingValue Value="BlazorDiagram">
    <DiagramCanvas></DiagramCanvas>
</CascadingValue>

 